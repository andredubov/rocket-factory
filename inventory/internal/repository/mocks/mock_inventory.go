// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/andredubov/rocket-factory/inventory/internal/repository/model"
	mock "github.com/stretchr/testify/mock"
)

// Inventory is an autogenerated mock type for the Inventory type
type Inventory struct {
	mock.Mock
}

type Inventory_Expecter struct {
	mock *mock.Mock
}

func (_m *Inventory) EXPECT() *Inventory_Expecter {
	return &Inventory_Expecter{mock: &_m.Mock}
}

// AddPart provides a mock function with given fields: ctx, part
func (_m *Inventory) AddPart(ctx context.Context, part model.Part) error {
	ret := _m.Called(ctx, part)

	if len(ret) == 0 {
		panic("no return value specified for AddPart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Part) error); ok {
		r0 = rf(ctx, part)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Inventory_AddPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPart'
type Inventory_AddPart_Call struct {
	*mock.Call
}

// AddPart is a helper method to define mock.On call
//   - ctx context.Context
//   - part model.Part
func (_e *Inventory_Expecter) AddPart(ctx interface{}, part interface{}) *Inventory_AddPart_Call {
	return &Inventory_AddPart_Call{Call: _e.mock.On("AddPart", ctx, part)}
}

func (_c *Inventory_AddPart_Call) Run(run func(ctx context.Context, part model.Part)) *Inventory_AddPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Part))
	})
	return _c
}

func (_c *Inventory_AddPart_Call) Return(_a0 error) *Inventory_AddPart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Inventory_AddPart_Call) RunAndReturn(run func(context.Context, model.Part) error) *Inventory_AddPart_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePart provides a mock function with given fields: ctx, uuid
func (_m *Inventory) DeletePart(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeletePart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Inventory_DeletePart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePart'
type Inventory_DeletePart_Call struct {
	*mock.Call
}

// DeletePart is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *Inventory_Expecter) DeletePart(ctx interface{}, uuid interface{}) *Inventory_DeletePart_Call {
	return &Inventory_DeletePart_Call{Call: _e.mock.On("DeletePart", ctx, uuid)}
}

func (_c *Inventory_DeletePart_Call) Run(run func(ctx context.Context, uuid string)) *Inventory_DeletePart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Inventory_DeletePart_Call) Return(_a0 error) *Inventory_DeletePart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Inventory_DeletePart_Call) RunAndReturn(run func(context.Context, string) error) *Inventory_DeletePart_Call {
	_c.Call.Return(run)
	return _c
}

// GetPart provides a mock function with given fields: ctx, uuid
func (_m *Inventory) GetPart(ctx context.Context, uuid string) (*model.Part, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetPart")
	}

	var r0 *model.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Part, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Part); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inventory_GetPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPart'
type Inventory_GetPart_Call struct {
	*mock.Call
}

// GetPart is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *Inventory_Expecter) GetPart(ctx interface{}, uuid interface{}) *Inventory_GetPart_Call {
	return &Inventory_GetPart_Call{Call: _e.mock.On("GetPart", ctx, uuid)}
}

func (_c *Inventory_GetPart_Call) Run(run func(ctx context.Context, uuid string)) *Inventory_GetPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Inventory_GetPart_Call) Return(_a0 *model.Part, _a1 error) *Inventory_GetPart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inventory_GetPart_Call) RunAndReturn(run func(context.Context, string) (*model.Part, error)) *Inventory_GetPart_Call {
	_c.Call.Return(run)
	return _c
}

// GetPartList provides a mock function with given fields: ctx, filter
func (_m *Inventory) GetPartList(ctx context.Context, filter model.PartFilter) ([]model.Part, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetPartList")
	}

	var r0 []model.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PartFilter) ([]model.Part, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PartFilter) []model.Part); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PartFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inventory_GetPartList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartList'
type Inventory_GetPartList_Call struct {
	*mock.Call
}

// GetPartList is a helper method to define mock.On call
//   - ctx context.Context
//   - filter model.PartFilter
func (_e *Inventory_Expecter) GetPartList(ctx interface{}, filter interface{}) *Inventory_GetPartList_Call {
	return &Inventory_GetPartList_Call{Call: _e.mock.On("GetPartList", ctx, filter)}
}

func (_c *Inventory_GetPartList_Call) Run(run func(ctx context.Context, filter model.PartFilter)) *Inventory_GetPartList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.PartFilter))
	})
	return _c
}

func (_c *Inventory_GetPartList_Call) Return(_a0 []model.Part, _a1 error) *Inventory_GetPartList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inventory_GetPartList_Call) RunAndReturn(run func(context.Context, model.PartFilter) ([]model.Part, error)) *Inventory_GetPartList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePart provides a mock function with given fields: ctx, part
func (_m *Inventory) UpdatePart(ctx context.Context, part model.Part) error {
	ret := _m.Called(ctx, part)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Part) error); ok {
		r0 = rf(ctx, part)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Inventory_UpdatePart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePart'
type Inventory_UpdatePart_Call struct {
	*mock.Call
}

// UpdatePart is a helper method to define mock.On call
//   - ctx context.Context
//   - part model.Part
func (_e *Inventory_Expecter) UpdatePart(ctx interface{}, part interface{}) *Inventory_UpdatePart_Call {
	return &Inventory_UpdatePart_Call{Call: _e.mock.On("UpdatePart", ctx, part)}
}

func (_c *Inventory_UpdatePart_Call) Run(run func(ctx context.Context, part model.Part)) *Inventory_UpdatePart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Part))
	})
	return _c
}

func (_c *Inventory_UpdatePart_Call) Return(_a0 error) *Inventory_UpdatePart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Inventory_UpdatePart_Call) RunAndReturn(run func(context.Context, model.Part) error) *Inventory_UpdatePart_Call {
	_c.Call.Return(run)
	return _c
}

// NewInventory creates a new instance of Inventory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInventory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Inventory {
	mock := &Inventory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
