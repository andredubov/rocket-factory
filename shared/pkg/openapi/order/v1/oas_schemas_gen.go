// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// Ref: #
type BadRequestError struct {
	// HTTP status code.
	Code int `json:"code"`
	// Description of the response.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestError) SetMessage(val string) {
	s.Message = val
}

func (*BadRequestError) createOrderRes() {}
func (*BadRequestError) payOrderRes()    {}

// CancelOrderNoContent is response for CancelOrder operation.
type CancelOrderNoContent struct{}

func (*CancelOrderNoContent) cancelOrderRes() {}

// Ref: #
type ConflictError struct {
	// HTTP status code.
	Code int `json:"code"`
	// Description of the response.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConflictError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConflictError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConflictError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConflictError) SetMessage(val string) {
	s.Message = val
}

func (*ConflictError) cancelOrderRes() {}
func (*ConflictError) createOrderRes() {}
func (*ConflictError) payOrderRes()    {}

// Данные для создания нового заказа.
// Должен содержать UUID пользователя и хотя бы один UUID
// детали.
// Ref: #
type CreateOrderRequest struct {
	// Уникальный идентификатор пользователя.
	UserUUID uuid.UUID `json:"user_uuid"`
	// Список идентификаторов деталей для заказа.
	PartUuids []uuid.UUID `json:"part_uuids"`
}

// GetUserUUID returns the value of UserUUID.
func (s *CreateOrderRequest) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *CreateOrderRequest) GetPartUuids() []uuid.UUID {
	return s.PartUuids
}

// SetUserUUID sets the value of UserUUID.
func (s *CreateOrderRequest) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *CreateOrderRequest) SetPartUuids(val []uuid.UUID) {
	s.PartUuids = val
}

// Ответ при успешном создании заказа.
// Содержит UUID заказа и рассчитанную итоговую стоимость.
// Ref: #
type CreateOrderResponse struct {
	// Уникальный идентификатор созданного заказа.
	OrderUUID OptUUID `json:"order_uuid"`
	// Общая сумма заказа, рассчитанная как сумма
	// стоимостей всех деталей.
	// Представляется в виде десятичного числа с 2 знаками
	// после запятой.
	TotalPrice OptFloat64 `json:"total_price"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *CreateOrderResponse) GetOrderUUID() OptUUID {
	return s.OrderUUID
}

// GetTotalPrice returns the value of TotalPrice.
func (s *CreateOrderResponse) GetTotalPrice() OptFloat64 {
	return s.TotalPrice
}

// SetOrderUUID sets the value of OrderUUID.
func (s *CreateOrderResponse) SetOrderUUID(val OptUUID) {
	s.OrderUUID = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *CreateOrderResponse) SetTotalPrice(val OptFloat64) {
	s.TotalPrice = val
}

func (*CreateOrderResponse) createOrderRes() {}

// Ref: #
type GenericError struct {
	// HTTP status code.
	Code OptInt `json:"code"`
	// Description of the response.
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *GenericError) GetCode() OptInt {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GenericError) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *GenericError) SetCode(val OptInt) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GenericError) SetMessage(val OptString) {
	s.Message = val
}

// GenericErrorStatusCode wraps GenericError with StatusCode.
type GenericErrorStatusCode struct {
	StatusCode int
	Response   GenericError
}

// GetStatusCode returns the value of StatusCode.
func (s *GenericErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GenericErrorStatusCode) GetResponse() GenericError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GenericErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GenericErrorStatusCode) SetResponse(val GenericError) {
	s.Response = val
}

func (*GenericErrorStatusCode) createOrderRes()    {}
func (*GenericErrorStatusCode) getOrderByUuidRes() {}

// Полная информация о заказе, включая текущий статус,
// детали оплаты (если заказ оплачен) и список деталей.
// Ref: #
type GetOrderResponse struct {
	// Уникальный идентификатор заказа.
	OrderUUID uuid.UUID `json:"order_uuid"`
	// Идентификатор пользователя, создавшего заказ.
	UserUUID uuid.UUID `json:"user_uuid"`
	// Список деталей в заказе.
	PartUuids []uuid.UUID `json:"part_uuids"`
	// Общая сумма заказа в денежных единицах.
	TotalPrice float64 `json:"total_price"`
	// Идентификатор платежной транзакции.
	// Присутствует только для оплаченных заказов.
	TransactionUUID OptNilUUID `json:"transaction_uuid"`
	// Использованный способ оплаты.
	// Присутствует только для оплаченных заказов.
	PaymentMethod OptPaymentMethod `json:"payment_method"`
	// Текущий статус заказа.
	Status OrderStatus `json:"status"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *GetOrderResponse) GetOrderUUID() uuid.UUID {
	return s.OrderUUID
}

// GetUserUUID returns the value of UserUUID.
func (s *GetOrderResponse) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *GetOrderResponse) GetPartUuids() []uuid.UUID {
	return s.PartUuids
}

// GetTotalPrice returns the value of TotalPrice.
func (s *GetOrderResponse) GetTotalPrice() float64 {
	return s.TotalPrice
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *GetOrderResponse) GetTransactionUUID() OptNilUUID {
	return s.TransactionUUID
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *GetOrderResponse) GetPaymentMethod() OptPaymentMethod {
	return s.PaymentMethod
}

// GetStatus returns the value of Status.
func (s *GetOrderResponse) GetStatus() OrderStatus {
	return s.Status
}

// SetOrderUUID sets the value of OrderUUID.
func (s *GetOrderResponse) SetOrderUUID(val uuid.UUID) {
	s.OrderUUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *GetOrderResponse) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *GetOrderResponse) SetPartUuids(val []uuid.UUID) {
	s.PartUuids = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *GetOrderResponse) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *GetOrderResponse) SetTransactionUUID(val OptNilUUID) {
	s.TransactionUUID = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *GetOrderResponse) SetPaymentMethod(val OptPaymentMethod) {
	s.PaymentMethod = val
}

// SetStatus sets the value of Status.
func (s *GetOrderResponse) SetStatus(val OrderStatus) {
	s.Status = val
}

func (*GetOrderResponse) getOrderByUuidRes() {}

// Ref: #
type InternalServerError struct {
	// HTTP status code.
	Code int `json:"code"`
	// Description of the response.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*InternalServerError) createOrderRes()    {}
func (*InternalServerError) getOrderByUuidRes() {}

// InternalServerErrorStatusCode wraps InternalServerError with StatusCode.
type InternalServerErrorStatusCode struct {
	StatusCode int
	Response   InternalServerError
}

// GetStatusCode returns the value of StatusCode.
func (s *InternalServerErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *InternalServerErrorStatusCode) GetResponse() InternalServerError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *InternalServerErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *InternalServerErrorStatusCode) SetResponse(val InternalServerError) {
	s.Response = val
}

func (*InternalServerErrorStatusCode) cancelOrderRes() {}
func (*InternalServerErrorStatusCode) payOrderRes()    {}

// Ref: #
type NotFoundError struct {
	// HTTP status code.
	Code int `json:"code"`
	// Description of the response.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundError) cancelOrderRes()    {}
func (*NotFoundError) getOrderByUuidRes() {}
func (*NotFoundError) payOrderRes()       {}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUUID returns new OptNilUUID with value set to v.
func NewOptNilUUID(v uuid.UUID) OptNilUUID {
	return OptNilUUID{
		Value: v,
		Set:   true,
	}
}

// OptNilUUID is optional nullable uuid.UUID.
type OptNilUUID struct {
	Value uuid.UUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUUID was set.
func (o OptNilUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilUUID) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilUUID) SetToNull() {
	o.Set = true
	o.Null = true
	var v uuid.UUID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUUID) Get() (v uuid.UUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethod returns new OptPaymentMethod with value set to v.
func NewOptPaymentMethod(v PaymentMethod) OptPaymentMethod {
	return OptPaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethod is optional PaymentMethod.
type OptPaymentMethod struct {
	Value PaymentMethod
	Set   bool
}

// IsSet returns true if OptPaymentMethod was set.
func (o OptPaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethod) Reset() {
	var v PaymentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethod) SetTo(v PaymentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethod) Get() (v PaymentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethod) Or(d PaymentMethod) PaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Возможные статусы заказа:
// - PENDING_PAYMENT - Заказ создан, но не оплачен
// - PAID - Заказ успешно оплачен
// - CANCELLED - Заказ отменен.
// Ref: #
type OrderStatus string

const (
	OrderStatusPENDINGPAYMENT OrderStatus = "PENDING_PAYMENT"
	OrderStatusPAID           OrderStatus = "PAID"
	OrderStatusCANCELLED      OrderStatus = "CANCELLED"
)

// AllValues returns all OrderStatus values.
func (OrderStatus) AllValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusPENDINGPAYMENT,
		OrderStatusPAID,
		OrderStatusCANCELLED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderStatusPENDINGPAYMENT:
		return []byte(s), nil
	case OrderStatusPAID:
		return []byte(s), nil
	case OrderStatusCANCELLED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStatus) UnmarshalText(data []byte) error {
	switch OrderStatus(data) {
	case OrderStatusPENDINGPAYMENT:
		*s = OrderStatusPENDINGPAYMENT
		return nil
	case OrderStatusPAID:
		*s = OrderStatusPAID
		return nil
	case OrderStatusCANCELLED:
		*s = OrderStatusCANCELLED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Данные для оплаты заказа.
// Требуется выбор одного из доступных методов оплаты.
// Ref: #
type PayOrderRequest struct {
	// Выбранный способ оплаты.
	PaymentMethod PaymentMethod `json:"payment_method"`
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *PayOrderRequest) GetPaymentMethod() PaymentMethod {
	return s.PaymentMethod
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *PayOrderRequest) SetPaymentMethod(val PaymentMethod) {
	s.PaymentMethod = val
}

// Ответ при успешной оплате заказа.
// Содержит идентификатор транзакции.
// Ref: #
type PayOrderResponse struct {
	// Уникальный идентификатор платежной транзакции.
	// Генерируется платежной системой.
	TransactionUUID OptUUID `json:"transaction_uuid"`
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *PayOrderResponse) GetTransactionUUID() OptUUID {
	return s.TransactionUUID
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *PayOrderResponse) SetTransactionUUID(val OptUUID) {
	s.TransactionUUID = val
}

func (*PayOrderResponse) payOrderRes() {}

// Доступные методы оплаты:
// - UNKNOWN - Не известный способ
// - CARD - Банковская карта
// - SBP - Система быстрых платежей
// - CREDIT_CARD - Кредитная карта
// - INVESTOR_MONEY - Инвестиционные средства.
// Ref: #
type PaymentMethod string

const (
	PaymentMethodUNKNOWN       PaymentMethod = "UNKNOWN"
	PaymentMethodCARD          PaymentMethod = "CARD"
	PaymentMethodSBP           PaymentMethod = "SBP"
	PaymentMethodCREDITCARD    PaymentMethod = "CREDIT_CARD"
	PaymentMethodINVESTORMONEY PaymentMethod = "INVESTOR_MONEY"
)

// AllValues returns all PaymentMethod values.
func (PaymentMethod) AllValues() []PaymentMethod {
	return []PaymentMethod{
		PaymentMethodUNKNOWN,
		PaymentMethodCARD,
		PaymentMethodSBP,
		PaymentMethodCREDITCARD,
		PaymentMethodINVESTORMONEY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodUNKNOWN:
		return []byte(s), nil
	case PaymentMethodCARD:
		return []byte(s), nil
	case PaymentMethodSBP:
		return []byte(s), nil
	case PaymentMethodCREDITCARD:
		return []byte(s), nil
	case PaymentMethodINVESTORMONEY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethod) UnmarshalText(data []byte) error {
	switch PaymentMethod(data) {
	case PaymentMethodUNKNOWN:
		*s = PaymentMethodUNKNOWN
		return nil
	case PaymentMethodCARD:
		*s = PaymentMethodCARD
		return nil
	case PaymentMethodSBP:
		*s = PaymentMethodSBP
		return nil
	case PaymentMethodCREDITCARD:
		*s = PaymentMethodCREDITCARD
		return nil
	case PaymentMethodINVESTORMONEY:
		*s = PaymentMethodINVESTORMONEY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
